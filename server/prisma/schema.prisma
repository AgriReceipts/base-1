// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  deo //data entry operator
  supervisor
  secretary
  ad //assitant director( has disctrict wide access while the above 3 only has committee wide access)
}

enum Unit {
  tons
  kilograms
  quintals
  numbers
  bags
}

enum NatureOfReceipt {
  mf // market fees
  lc // license
  uc // user charge
  others
}

enum CollectionLocation {
  office
  checkpost
  other
}

// Models
model User {
  id           String   @id @default(uuid())
  username     String   @unique
  passwordHash String
  name         String
  role         UserRole
  committeeId  String?
  designation  String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  committee Committee? @relation(fields: [committeeId], references: [id])
  receipts  Receipt[]

  @@index([username])
}

model Committee {
  id         String      @id @default(uuid())
  name       String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  // Relations
  users      User[]
  checkposts Checkpost[]
  receipts   Receipt[]

  @@index([name])
}

model Checkpost {
  id          String   @id @default(uuid())
  name        String
  committeeId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  committee Committee @relation(fields: [committeeId], references: [id])
  receipts  Receipt[]
}

model Commodity {
  id          String    @id @default(uuid())
  name        String    @unique
  category    String?
  description String?
  receipts    Receipt[]

  @@index([name])
  @@index([category])
}

model Receipt {
  id                  String             @id @default(uuid())
  receiptDate         DateTime
  bookNumber          String
  receiptNumber       String
  traderName          String
  traderAddress       String
  payeeName           String
  payeeAddress        String
  commodityId         String?
  quantity            Decimal
  unit                Unit
  natureOfReceipt     NatureOfReceipt
  natureOtherText     String?
  value               Decimal
  feesPaid            Decimal
  vehicleNumber       String?
  invoiceNumber       String?
  collectionLocation  CollectionLocation
  officeSupervisor    String?
  checkpostId         String?
  collectionOtherText String?
  receiptSignedBy     String
  generatedBy         String
  designation         String
  committeeId         String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  // Relations
  committee           Committee          @relation(fields: [committeeId], references: [id])
  checkpost           Checkpost?         @relation(fields: [checkpostId], references: [id])
  user                User               @relation(fields: [generatedBy], references: [id])
  Commodity           Commodity?         @relation(fields: [commodityId], references: [id])

  // Unique constraint for book_number + receipt_number per committee
  @@unique([bookNumber, receiptNumber, committeeId])
  @@index([receiptNumber])
}
