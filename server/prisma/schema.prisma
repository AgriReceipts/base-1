// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  deo //data entry operator
  supervisor
  secretary
  ad //assistant director( has district wide access while the above 3 only has committee wide access)
}

enum Unit {
  tons
  kilograms
  quintals
  numbers
  bags
}

enum NatureOfReceipt {
  mf // market fees
  lc // license
  uc // user charge
  others
}

enum CollectionLocation {
  office
  checkpost
  other
}

// Models
model User {
  id           String   @id @default(uuid())
  username     String   @unique
  passwordHash String
  name         String
  role         UserRole
  committeeId  String?
  designation  String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  committee Committee? @relation(fields: [committeeId], references: [id])
  receipts  Receipt[]

  @@index([username])
}

model Committee {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users      User[]
  checkposts Checkpost[]
  receipts   Receipt[]

  @@index([name])
}

model Checkpost {
  id          String   @id @default(uuid())
  name        String
  committeeId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  committee Committee @relation(fields: [committeeId], references: [id])
  receipts  Receipt[]
}

model Trader {
  id            String   @id @default(uuid())
  name          String   @unique
  address       String
  phone         String?
  email         String?
  gstNumber     String?
  panNumber     String?
  licenseNumber String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  receipts Receipt[]

  @@index([name])
  @@index([phone])
  @@index([gstNumber])
}

model Commodity {
  id          String  @id @default(uuid())
  name        String  @unique
  category    String?
  subCategory String?
  description String?

  // Relations
  receipts Receipt[]

  @@index([name])
  @@index([category])
}

model Receipt {
  id            String   @id @default(uuid())
  receiptDate   DateTime
  bookNumber    String
  receiptNumber String

  // Trader information (now references Trader table)
  traderId String

  // Payee information (keeping as text since it might be different from trader)
  payeeName    String
  payeeAddress String

  // Commodity and quantity
  commodityId String?
  quantity    Decimal
  unit        Unit

  // For bags unit - weight handling
  weightPerBag  Decimal? // Weight of each bag in kg (only for bags unit)
  totalWeightKg Decimal? // Total weight in kg (computed for bags, converted for tons/quintals)

  // Nature and fees
  natureOfReceipt NatureOfReceipt
  natureOtherText String?
  value           Decimal
  feesPaid        Decimal

  // Vehicle and invoice
  vehicleNumber String?
  invoiceNumber String?

  // Collection details
  collectionLocation  CollectionLocation
  officeSupervisor    String?
  checkpostId         String?
  collectionOtherText String?

  // Receipt generation details
  receiptSignedBy String
  generatedBy     String
  designation     String
  committeeId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  committee Committee  @relation(fields: [committeeId], references: [id])
  checkpost Checkpost? @relation(fields: [checkpostId], references: [id])
  user      User       @relation(fields: [generatedBy], references: [id])
  commodity Commodity? @relation(fields: [commodityId], references: [id])
  trader    Trader     @relation(fields: [traderId], references: [id])

  // Unique constraint for book_number + receipt_number per committee
  @@unique([bookNumber, receiptNumber, committeeId])
  @@index([receiptNumber])
  @@index([receiptDate])
  @@index([traderId])
  @@index([commodityId])
  @@index([natureOfReceipt])
  @@index([value])
  @@index([feesPaid])
  @@index([collectionLocation])
}
